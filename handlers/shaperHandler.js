const { shapeConfig } = require('../config/shapes');
const AvatarManager = require('../utils/avatarManager');

class ShaperHandler {
  constructor(revoltAPI, messageManager, availableShapes) {
    this.api = revoltAPI;
    this.messageManager = messageManager;
    this.availableShapes = availableShapes;
    this.activeShapes = new Map();
    this.avatarManager = new AvatarManager();
    this.shaperMessages = new Map(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    this.lastBotProfileUpdate = 0; // –î–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –±–æ—Ç–∞
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã !shaper
  async handleShaperCommand(channelId, originalMessageId) {
    try {
      let message = "üé≠ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:**\n\n";
      
      const availableShapeIds = Object.keys(this.availableShapes);
      for (const shapeId of availableShapeIds) {
        const config = shapeConfig[shapeId];
        if (config) {
          message += `${config.emoji} - ${config.name}\n`;
        }
      }
      
      message += "\n*–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞*";
      
      const sentMessage = await this.messageManager.sendMessage(channelId, message);
      
      if (sentMessage && sentMessage._id) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
        this.shaperMessages.set(channelId, {
          selectionMessageId: sentMessage._id,
          originalMessageId: originalMessageId
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏
        for (const shapeId of availableShapeIds) {
          const config = shapeConfig[shapeId];
          if (config && config.emoji) {
            await this.addReaction(channelId, sentMessage._id, config.emoji);
            await new Promise(resolve => setTimeout(resolve, 200));
          }
        }
      }
      
      return sentMessage;
    } catch (error) {
      console.error('Error handling shaper command:', error.message);
      await this.messageManager.sendMessage(channelId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.");
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
  async addReaction(channelId, messageId, emoji) {
    try {
      const encodedEmoji = encodeURIComponent(emoji);
      const endpoint = `/channels/${channelId}/messages/${messageId}/reactions/${encodedEmoji}`;
      await this.api.put(endpoint);
    } catch (error) {
      console.error(`Error adding reaction ${emoji}:`, error.message);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  async handleShapeSelection(channelId, emoji, userId, botId) {
    if (userId === botId) return;

    // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π Shape –ø–æ —ç–º–æ–¥–∑–∏
    let selectedShapeId = null;
    for (const [shapeId, config] of Object.entries(shapeConfig)) {
      if (config.emoji === emoji) {
        selectedShapeId = shapeId;
        break;
      }
    }

    if (selectedShapeId && this.availableShapes[selectedShapeId]) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π Shape –¥–ª—è –∫–∞–Ω–∞–ª–∞
      this.activeShapes.set(channelId, selectedShapeId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      const config = shapeConfig[selectedShapeId];
      const masquerade = await this.createMasquerade(selectedShapeId);
      
      await this.messageManager.sendMessage(
        channelId, 
        `üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ **${config.name}** ${config.emoji}`,
        masquerade
      );

      // –°–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –∏ –∞–≤–∞—Ç–∞—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞:
      await this.updateBotProfile(selectedShapeId);

      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
      if (this.shaperMessages.has(channelId)) {
        const { selectionMessageId, originalMessageId } = this.shaperMessages.get(channelId);
        const messagesToDelete = [selectionMessageId];
        if (originalMessageId) messagesToDelete.push(originalMessageId);
        
        this.messageManager.scheduleMessageDeletion(channelId, messagesToDelete, 60000);
        this.shaperMessages.delete(channelId);
      }

      return true;
    }

    return false;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∞—Ä–∞–¥–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  async createMasquerade(shapeId) {
    try {
      const config = shapeConfig[shapeId];
      if (!config) return null;

      const avatar = await this.avatarManager.getShapeAvatar(shapeId);
      
      return {
        name: config.name,
        avatar: avatar,
        colour: config.colour
      };
    } catch (error) {
      console.error('Error creating masquerade:', error.message);
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
  getActiveShape(channelId) {
    return this.activeShapes.get(channelId);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å–∫–∞—Ä–∞–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  async getActiveMasquerade(channelId) {
    const activeShapeId = this.activeShapes.get(channelId);
    if (!activeShapeId) return null;
    
    return await this.createMasquerade(activeShapeId);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–°–ø—Ä–æ—Å–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
  async updateBotProfile(shapeId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã (–Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 10 —Å–µ–∫—É–Ω–¥)
      const now = Date.now();
      if (now - this.lastBotProfileUpdate < 10000) {
        console.log('Bot profile update skipped due to rate limit');
        return false;
      }

      const config = shapeConfig[shapeId];
      if (!config) return false;

      const username = config.name;

      const result = await this.api.updateBotProfile(username);
      
      if (result) {
        this.lastBotProfileUpdate = now;
        console.log(`Bot profile updated to ${username}`);
      }
      
      return result;
    } catch (error) {
      console.error('Error updating bot profile:', error.message);
      return false;
    }
  }
}

module.exports = ShaperHandler;
