class MessageManager {
  constructor(revoltAPI) {
    this.api = revoltAPI;
    this.recentBotMessages = new Set();
    this.recentUserMessages = new Map(); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.recentBotResponses = new Map(); // –î–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.askAnotherShapeCooldown = new Map(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
    this.pendingDeletions = new Map(); // –î–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID
  async sendMessage(channelId, content, masquerade = null, originalUserMessageId = null) {
    try {
      const MAX_LENGTH = 1000;
      
      const messageBody = { content };
      if (masquerade) {
        messageBody.masquerade = masquerade;
      }
      
      if (content.length <= MAX_LENGTH) {
        const response = await this.api.post(`/channels/${channelId}/messages`, messageBody);
        
        if (response.data && response.data._id) {
          this.addBotMessage(response.data._id);
          
          // –°–≤—è–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (originalUserMessageId) {
            this.recentBotResponses.set(response.data._id, originalUserMessageId);
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é "üîÑ" –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (!content.includes('**–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:**') && 
              !content.includes('**–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:**') &&
              !content.includes('‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ') &&
              !content.includes('–æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å')) {
            try {
              await this.addReactionToMessage(channelId, response.data._id, 'üîÑ');
            } catch (error) {
              console.error('Error adding üîÑ reaction:', error.message);
            }
          }
        }
        return response.data;
      } else {
        // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
        const chunks = this.splitMessage(content, MAX_LENGTH);
        
        for (const chunk of chunks) {
          const chunkBody = { content: chunk };
          if (masquerade) {
            chunkBody.masquerade = masquerade;
          }
          
          const response = await this.api.post(`/channels/${channelId}/messages`, chunkBody);
          if (response.data && response.data._id) {
            this.addBotMessage(response.data._id);
            if (originalUserMessageId) {
              this.recentBotResponses.set(response.data._id, originalUserMessageId);
            }
          }
        }
        return { message: 'All chunks sent' };
      }
    } catch (error) {
      console.error('Error sending message:', error.message);
      throw error;
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
  async addReactionToMessage(channelId, messageId, emoji) {
    const encodedEmoji = encodeURIComponent(emoji);
    const endpoint = `/channels/${channelId}/messages/${messageId}/reactions/${encodedEmoji}`;
    await this.api.put(endpoint);
  }

  // –†–∞–∑–±–∏–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
  splitMessage(content, maxLength) {
    const chunks = [];
    let currentChunk = '';
    const paragraphs = content.split('\n\n');

    for (const paragraph of paragraphs) {
      if (currentChunk.length + paragraph.length + 2 <= maxLength) {
        currentChunk += (currentChunk ? '\n\n' : '') + paragraph;
      } else {
        if (currentChunk) chunks.push(currentChunk);
        currentChunk = paragraph;
        
        while (currentChunk.length > maxLength) {
          let splitPoint = currentChunk.lastIndexOf(' ', maxLength);
          if (splitPoint === -1) splitPoint = maxLength;
          chunks.push(currentChunk.slice(0, splitPoint));
          currentChunk = currentChunk.slice(splitPoint).trim();
        }
      }
    }
    
    if (currentChunk) chunks.push(currentChunk);
    return chunks;
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–µ—à
  addBotMessage(messageId) {
    this.recentBotMessages.add(messageId);
    if (this.recentBotMessages.size > 100) {
      const firstMessage = [...this.recentBotMessages][0];
      this.recentBotMessages.delete(firstMessage);
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–µ—à
  addRecentUserMessage(messageId, messageData) {
    this.recentUserMessages.set(messageId, messageData);
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
    if (this.recentUserMessages.size > 50) {
      const firstMessage = [...this.recentUserMessages.keys()][0];
      this.recentUserMessages.delete(firstMessage);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–µ—à–∞
  getRecentUserMessage(messageId) {
    return this.recentUserMessages.get(messageId);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –±–æ—Ç–∞
  isReplyToBot(replies) {
    if (!replies || replies.length === 0) return false;
    return replies.some(id => this.recentBotMessages.has(id));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
  checkAndSetCooldown(channelId, cooldownMs) {
    const now = Date.now();
    const lastUsed = this.askAnotherShapeCooldown.get(channelId) || 0;
    
    if (now - lastUsed < cooldownMs) {
      return false;
    }
    
    this.askAnotherShapeCooldown.set(channelId, now);
    return true;
  }

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
  scheduleMessageDeletion(channelId, messageIds, delayMs = 60000) {
    const timeoutId = setTimeout(async () => {
      for (const messageId of messageIds) {
        await this.api.deleteMessage(channelId, messageId);
      }
      this.pendingDeletions.delete(channelId);
    }, delayMs);

    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–¥–∞–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.pendingDeletions.has(channelId)) {
      clearTimeout(this.pendingDeletions.get(channelId));
    }
    
    this.pendingDeletions.set(channelId, timeoutId);
  }

  // –û—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  cancelScheduledDeletion(channelId) {
    if (this.pendingDeletions.has(channelId)) {
      clearTimeout(this.pendingDeletions.get(channelId));
      this.pendingDeletions.delete(channelId);
    }
  }
}

module.exports = MessageManager;